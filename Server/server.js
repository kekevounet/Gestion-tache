
const express = require('express');
const mysql = require('mysql2');
const cors = require('cors');
const app = express();
const port = 5000;

app.use(cors());
app.use(express.json());

// Connexion Ã  la base de donnÃ©es
const db = mysql.createConnection({
  host: 'localhost',
  user: 'root',
  password: '',
  database: 'gestion_de_tache',
});

db.connect((err) => {
  if (err) {
    console.error('Erreur de connexion Ã  la base de donnÃ©es :', err);
  } else {
    console.log('âœ… ConnectÃ© Ã  la base de donnÃ©es.');
  }
});

// RÃ©cupÃ©ration de toutes les tÃ¢ches
app.get('/tache', (req, res) => {
  db.query('SELECT * FROM tache', (err, result) => {
    if (err) {
      return res.status(500).send('Erreur lors de la rÃ©cupÃ©ration des tÃ¢ches.');
    }
    res.json(result);
  });
});

// RÃ©cupÃ©ration d'une tÃ¢che par ID
app.get('/tache/modifier/:id', (req, res) => {
  const { id } = req.params;
  db.query('SELECT * FROM tache WHERE id = ?', [id], (err, result) => {
    if (err) {
      return res.status(500).send('Erreur lors de la rÃ©cupÃ©ration de la tÃ¢che.');
    }
    res.json(result);
  });
});

// Mise Ã  jour d'une tÃ¢che
app.put('/tache/:id', (req, res) => {
  const { id } = req.params;
  const { nom, description } = req.body;
  db.query(
    'UPDATE tache SET nom = ?, description = ? WHERE id = ?',
    [nom, description, id],
    (err, result) => {
      if (err) {
        return res.status(500).send('Erreur lors de la mise Ã  jour de la tÃ¢che.');
      }
      res.json(result);
    }
  );
});

// Suppression d'une tÃ¢che
app.delete('/tache/:id', (req, res) => {
  const { id } = req.params;
  db.query('DELETE FROM tache WHERE id = ?', [id], (err, result) => {
    if (err) {
      return res.status(500).send('Erreur lors de la suppression de la tÃ¢che.');
    }
    res.json({ message: 'TÃ¢che supprimÃ©e avec succÃ¨s.' });
  });
});

// CrÃ©ation d'une tÃ¢che
app.post('/tache', (req, res) => {
  const { nom, description } = req.body;
  const date = new Date();
  const status = 0;

  db.query(
    'INSERT INTO tache (nom, description, date, status) VALUES (?, ?, ?, ?)',
    [nom, description, date, status],
    (err, result) => {
      if (err) {
        return res.status(500).send("Erreur lors de l'ajout de la tÃ¢che.");
      }
      res.status(201).json({ message: 'TÃ¢che ajoutÃ©e avec succÃ¨s.' });
    }
  );
});

// Modifier une status des taches
app.put('/tache/status/:id', (req, res) => {
    const { id } = req.params;
    const { status } = req.body;

    db.query('UPDATE tache SET status = ? WHERE id = ?', [status, id], (error, result) => {
        if (error) {
            console.error(error);
            res.status(500).send('Erreur lors de la mise Ã  jour du statut');
        } else {
            res.json({ message: 'Statut mis Ã  jour avec succÃ¨s' });
        }
    });
});

// DÃ©marrage du serveur
app.listen(port, () => {
  console.log(`ğŸš€ Serveur lancÃ© sur http://localhost:${port}`);
});
